package com.quickparkassist.model;import com.quickparkassist.model.AddonService;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;class AddonServiceTest {    @Test    void testAllArgsConstructor() {        // Create an instance using the all-args constructor        AddonService addonService = new AddonService(                1L, "Premium Service", "Provides additional features", 99.99f, 2.5f, true);        // Verify field values        assertEquals(1L, addonService.getServiceID());        assertEquals("Premium Service", addonService.getServiceName());        assertEquals("Provides additional features", addonService.getDescription());        assertEquals(99.99f, addonService.getPrice());        assertEquals(2.5f, addonService.getDuration());        assertTrue(addonService.getIsActive());    }    @Test    void testNoArgsConstructorAndSetters() {        // Create an instance using the no-args constructor        AddonService addonService = new AddonService();        // Set values using setters        addonService.setServiceID(2L);        addonService.setServiceName("Basic Service");        addonService.setDescription("Basic features for the service");        addonService.setPrice(49.99f);        addonService.setDuration(1.5f);        addonService.setIsActive(false);        addonService.setOwnerId(101L);        // Verify values using getters        assertEquals(2L, addonService.getServiceID());        assertEquals("Basic Service", addonService.getServiceName());        assertEquals("Basic features for the service", addonService.getDescription());        assertEquals(49.99f, addonService.getPrice());        assertEquals(1.5f, addonService.getDuration());        assertFalse(addonService.getIsActive());        assertEquals(101L, addonService.getOwnerId());    }    @Test    void testBuilderPattern() {        // Create an instance using the builder        AddonService addonService = AddonService.builder()                .ServiceID(3L)                .name("Custom Service")                .description("A customizable service option")                .price(75.00f)                .duration(3.0f)                .isActive(true)                .ownerId(102L)                .build();        // Verify field values        assertEquals(3L, addonService.getServiceID());        assertEquals("Custom Service", addonService.getServiceName());        assertEquals("A customizable service option", addonService.getDescription());        assertEquals(75.00f, addonService.getPrice());        assertEquals(3.0f, addonService.getDuration());        assertTrue(addonService.getIsActive());        assertEquals(102L, addonService.getOwnerId());    }    @Test    void testEqualsAndHashCode() {        // Create two identical instances        AddonService addon1 = new AddonService(                4L, "Test Service", "Service for testing", 20.0f, 1.0f, true);        AddonService addon2 = new AddonService(                4L, "Test Service", "Service for testing", 20.0f, 1.0f, true);        // Create a different instance        AddonService addon3 = new AddonService(                5L, "Another Service", "Different service", 30.0f, 2.0f, false);        // Self-equality        assertEquals(addon1, addon1, "An object should be equal to itself");        // Symmetry        assertEquals(addon1, addon2, "Equality should be symmetric");        assertEquals(addon2, addon1, "Equality should be symmetric");        // Null safety        assertNotEquals(addon1, null, "An object should not be equal to null");        // Consistency        assertEquals(addon1, addon2, "Equality should be consistent");        assertEquals(addon1, addon2, "Equality should be consistent across calls");        // Different objects        assertNotEquals(addon1, addon3, "Different objects should not be equal");        // Hash code checks        assertEquals(addon1.hashCode(), addon2.hashCode(), "Hash codes of equal objects should match");        assertNotEquals(addon1.hashCode(), addon3.hashCode(), "Hash codes of unequal objects should not match");    }    @Test    void testToString() {        // Create an instance        AddonService addonService = new AddonService(                6L, "Special Service", "Exclusive features", 150.0f, 5.0f, true);        // Verify string representation        String expected = "AddonService(ServiceID=6, name=Special Service, description=Exclusive features, price=150.0, duration=5.0, isActive=true, ownerId=null)";        assertEquals(expected, addonService.toString());    }    @Test    void testGettersAndSetters() {        // Arrange        AddonService service = new AddonService();        // Act        service.setServiceID(1L);        service.setName("Service A");        service.setDescription("Description A");        service.setPrice(100.0f);        service.setDuration(1.5f);        service.setIsActive(true);        // Assert        assertEquals(1L, service.getServiceID(), "ServiceID getter/setter should work correctly");        assertEquals("Service A", service.getName(), "Name getter/setter should work correctly");        assertEquals("Description A", service.getDescription(), "Description getter/setter should work correctly");        assertEquals(100.0f, service.getPrice(), "Price getter/setter should work correctly");        assertEquals(1.5f, service.getDuration(), "Duration getter/setter should work correctly");        assertTrue(service.getIsActive(), "isActive getter/setter should work correctly");    }    @Test    void testBuilder() {        AddonService addon = AddonService.builder()                .ownerId(1L)                .name("Service A")                .description("Description A")                .price(100.0f)                .duration(60.0f)                .isActive(true)                .build();        assertEquals(1L, addon.getOwnerId());        assertEquals("Service A", addon.getName());        assertEquals("Description A", addon.getDescription());        assertEquals(100.0f, addon.getPrice());        assertEquals(60.0f, addon.getDuration());        assertTrue(addon.getIsActive());    }    @Test    void testDefaultConstructor() {        AddonService addon = new AddonService();        assertNull(addon.getServiceID());        assertNull(addon.getName());        assertNull(addon.getDescription());        assertEquals(0.0f, addon.getPrice());        assertEquals(0.0f, addon.getDuration());        assertFalse(addon.getIsActive());    }    @Test    void testNullValuesInGettersAndSetters() {        AddonService service = new AddonService();        service.setServiceID(null);        service.setName(null);        service.setDescription(null);        service.setPrice(0.0f);        service.setDuration(0.0f);        service.setIsActive(false);        assertNull(service.getServiceID(), "ServiceID should be null");        assertNull(service.getName(), "Name should be null");        assertNull(service.getDescription(), "Description should be null");        assertEquals(0.0f, service.getPrice(), "Price should be 0.0");        assertEquals(0.0f, service.getDuration(), "Duration should be 0.0");        assertFalse(service.getIsActive(), "isActive should be false");    }    @Test    void testEqualsAndHashCodeWithNullFields() {        AddonService service1 = new AddonService();        AddonService service2 = new AddonService();        assertEquals(service1, service2, "Objects with all null fields should be equal");        assertEquals(service1.hashCode(), service2.hashCode(), "Hash codes should match for objects with all null fields");        service1.setServiceID(1L);        assertNotEquals(service1, service2, "Objects should not be equal if one field differs");        assertNotEquals(service1.hashCode(), service2.hashCode(), "Hash codes should not match if one field differs");        service2.setServiceID(1L);        assertEquals(service1, service2, "Objects should be equal if all fields are identical");        assertEquals(service1.hashCode(), service2.hashCode(), "Hash codes should match if all fields are identical");    }    @Test    void testToStringWithNullFields() {        AddonService service = new AddonService();        service.setServiceID(null);        service.setName(null);        service.setDescription(null);        service.setPrice(0.0f);        service.setDuration(0.0f);        service.setIsActive(false);        String expected = "AddonService(ServiceID=null, name=null, description=null, price=0.0, duration=0.0, isActive=false, ownerId=null)";        assertEquals(expected, service.toString(), "toString should handle null fields correctly");    }    @Test    void testBuilderWithPartialFields() {        AddonService service = AddonService.builder()                .name("Partial Service")                .price(50.0f)                .build();        assertNull(service.getServiceID(), "ServiceID should be null");        assertEquals("Partial Service", service.getName(), "Name should be 'Partial Service'");        assertNull(service.getDescription(), "Description should be null");        assertEquals(50.0f, service.getPrice(), "Price should be 50.0");        assertEquals(0.0f, service.getDuration(), "Duration should default to 0.0");        assertFalse(service.getIsActive(), "isActive should default to false");        assertNull(service.getOwnerId(), "OwnerId should be null");    }    @Test    void testIsActiveFieldVariants() {        AddonService activeService = new AddonService();        activeService.setIsActive(true);        assertTrue(activeService.getIsActive(), "isActive should be true");        AddonService inactiveService = new AddonService();        inactiveService.setIsActive(false);        assertFalse(inactiveService.getIsActive(), "isActive should be false");    }    @Test    void testSettersWithEdgeCases() {        AddonService addon = new AddonService();        addon.setPrice(Float.MAX_VALUE);        addon.setDuration(Float.MIN_VALUE);        assertEquals(Float.MAX_VALUE, addon.getPrice());        assertEquals(Float.MIN_VALUE, addon.getDuration());    }    @Test    void testEqualsWithDifferentClasses() {        AddonService addonService = new AddonService(1L, "Service", "Description", 10.0f, 2.0f, true);        assertNotEquals(addonService, "StringObject");    }    @Test    void testEqualsWithPartialFields() {        AddonService addon1 = new AddonService(1L, "Service", null, 0.0f, 0.0f, false);        AddonService addon2 = new AddonService(1L, null, null, 0.0f, 0.0f, false);        assertNotEquals(addon1, addon2);    }    @Test    void testNullableFields() {        AddonService addonService = new AddonService();        addonService.setDescription(null);        assertNull(addonService.getDescription());    }    @Test    void testOwnerIdSetterGetter() {        AddonService addonService = new AddonService();        addonService.setOwnerId(200L);        assertEquals(200L, addonService.getOwnerId());    }    @Test    void testNullFields() {        AddonService addonService = new AddonService();        addonService.setServiceID(null);        addonService.setName(null);        addonService.setDescription(null);        assertNull(addonService.getServiceID());        assertNull(addonService.getName());        assertNull(addonService.getDescription());    }}